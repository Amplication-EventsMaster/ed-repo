/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MembershipType } from "./MembershipType";
import { MembershipTypeCountArgs } from "./MembershipTypeCountArgs";
import { MembershipTypeFindManyArgs } from "./MembershipTypeFindManyArgs";
import { MembershipTypeFindUniqueArgs } from "./MembershipTypeFindUniqueArgs";
import { CreateMembershipTypeArgs } from "./CreateMembershipTypeArgs";
import { UpdateMembershipTypeArgs } from "./UpdateMembershipTypeArgs";
import { DeleteMembershipTypeArgs } from "./DeleteMembershipTypeArgs";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MembershipTypeService } from "../membershipType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MembershipType)
export class MembershipTypeResolverBase {
  constructor(
    protected readonly service: MembershipTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "read",
    possession: "any",
  })
  async _membershipTypesMeta(
    @graphql.Args() args: MembershipTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MembershipType])
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "read",
    possession: "any",
  })
  async membershipTypes(
    @graphql.Args() args: MembershipTypeFindManyArgs
  ): Promise<MembershipType[]> {
    return this.service.membershipTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MembershipType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "read",
    possession: "own",
  })
  async membershipType(
    @graphql.Args() args: MembershipTypeFindUniqueArgs
  ): Promise<MembershipType | null> {
    const result = await this.service.membershipType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MembershipType)
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "create",
    possession: "any",
  })
  async createMembershipType(
    @graphql.Args() args: CreateMembershipTypeArgs
  ): Promise<MembershipType> {
    return await this.service.createMembershipType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MembershipType)
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "update",
    possession: "any",
  })
  async updateMembershipType(
    @graphql.Args() args: UpdateMembershipTypeArgs
  ): Promise<MembershipType | null> {
    try {
      return await this.service.updateMembershipType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MembershipType)
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "delete",
    possession: "any",
  })
  async deleteMembershipType(
    @graphql.Args() args: DeleteMembershipTypeArgs
  ): Promise<MembershipType | null> {
    try {
      return await this.service.deleteMembershipType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Member], { name: "members" })
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async findMembers(
    @graphql.Parent() parent: MembershipType,
    @graphql.Args() args: MemberFindManyArgs
  ): Promise<Member[]> {
    const results = await this.service.findMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
