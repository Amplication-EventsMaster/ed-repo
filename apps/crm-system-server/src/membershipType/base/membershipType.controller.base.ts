/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MembershipTypeService } from "../membershipType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MembershipTypeCreateInput } from "./MembershipTypeCreateInput";
import { MembershipType } from "./MembershipType";
import { MembershipTypeFindManyArgs } from "./MembershipTypeFindManyArgs";
import { MembershipTypeWhereUniqueInput } from "./MembershipTypeWhereUniqueInput";
import { MembershipTypeUpdateInput } from "./MembershipTypeUpdateInput";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MemberWhereUniqueInput } from "../../member/base/MemberWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MembershipTypeControllerBase {
  constructor(
    protected readonly service: MembershipTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MembershipType })
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMembershipType(
    @common.Body() data: MembershipTypeCreateInput
  ): Promise<MembershipType> {
    return await this.service.createMembershipType({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MembershipType] })
  @ApiNestedQuery(MembershipTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async membershipTypes(
    @common.Req() request: Request
  ): Promise<MembershipType[]> {
    const args = plainToClass(MembershipTypeFindManyArgs, request.query);
    return this.service.membershipTypes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MembershipType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async membershipType(
    @common.Param() params: MembershipTypeWhereUniqueInput
  ): Promise<MembershipType | null> {
    const result = await this.service.membershipType({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MembershipType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMembershipType(
    @common.Param() params: MembershipTypeWhereUniqueInput,
    @common.Body() data: MembershipTypeUpdateInput
  ): Promise<MembershipType | null> {
    try {
      return await this.service.updateMembershipType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MembershipType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMembershipType(
    @common.Param() params: MembershipTypeWhereUniqueInput
  ): Promise<MembershipType | null> {
    try {
      return await this.service.deleteMembershipType({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/members")
  @ApiNestedQuery(MemberFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async findMembers(
    @common.Req() request: Request,
    @common.Param() params: MembershipTypeWhereUniqueInput
  ): Promise<Member[]> {
    const query = plainToClass(MemberFindManyArgs, request.query);
    const results = await this.service.findMembers(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,

        membershipType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/members")
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "update",
    possession: "any",
  })
  async connectMembers(
    @common.Param() params: MembershipTypeWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        connect: body,
      },
    };
    await this.service.updateMembershipType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/members")
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "update",
    possession: "any",
  })
  async updateMembers(
    @common.Param() params: MembershipTypeWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        set: body,
      },
    };
    await this.service.updateMembershipType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/members")
  @nestAccessControl.UseRoles({
    resource: "MembershipType",
    action: "update",
    possession: "any",
  })
  async disconnectMembers(
    @common.Param() params: MembershipTypeWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        disconnect: body,
      },
    };
    await this.service.updateMembershipType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
